스프링 MVC 패턴과 서비스 impl 관계정리

1. 컨트롤러는 서비스를 호출

    ex)Resource(name=”RawdataService”)

1. 서비스에서 DB가 연결하는 페이지를 만든다.
2. 서비스를 상속받아 xml 호출하도록 impl에서 만든다.
3. xml에서는 아이디를 정확하게 맞춰쓰고 prameterClass 와 resultClass를 통해 호출하도록 한다.
4. 다음 컨트롤러에서 List선언 객체(이름 정해서)를 담고 그 데이터에 서비스에서  DB연결 페이지를 정의해 담는다. 그리고 그걸 컨트롤러에서 띄어주도록  assAttribte를 한다.

- 서비스와 imlp를 만드는 이유

  그건 바로 DAO를 보내면 그 중간을 연결해주는 역할이 없어서 도중에 오류가 나면 프로젝트를 수행하는데 어려움이 있었다(DB에서)

대신 impl와 서비스가 도중에 트랜잭션이라는 것을 사용하여 도중에 문제가 발생할시 시작이전의 수행 방법으로 콜백해주는 역할을 해준다. 그를 통해 MVC패턴을 사용한다. 

서비스와 Impl(Implementation)을 만드는 이유는 소프트웨어 개발에서 모듈화, 구조화, 유지보수 및 확장성을 강화하기 위함입니다. 여기서 말씀하신 DAO는 데이터 액세스 계층(Data Access Object)을 의미하는 것으로 이해하겠습니다.

모듈화와 구조화: 서비스와 Impl을 나누는 것은 코드를 논리적으로 분리하여 기능을 모듈화하고 구조화하는데 도움을 줍니다. 이는 코드의 가독성을 향상시키고, 특정 기능에 대한 변경 시 해당 기능만 수정하면 되므로 전체 애플리케이션에 미치는 영향을 최소화합니다.

유지보수성: 서비스와 Impl을 분리함으로써 기능을 개선하거나 버그를 수정할 때 각각의 역할을 명확하게 이해하고 수정할 수 있습니다. 이는 코드의 유지보수성을 향상시키며, 개발자들이 협업할 때도 각자의 역할을 분담하여 작업할 수 있습니다.

트랜잭션 관리와 오류 처리: 말씀하신 것처럼 서비스와 Impl은 트랜잭션 관리와 오류 처리를 담당합니다. 트랜잭션은 여러 데이터 조작 작업을 하나의 논리적인 작업 단위로 묶어서 일관성을 보장해주는 개념입니다. 서비스와 Impl은 트랜잭션을 시작하고 종료하며, 중간에 오류가 발생할 경우 롤백(이전 상태로 복구)하거나 적절한 조치를 취하여 데이터의 일관성을 유지합니다.

MVC 패턴 활용: MVC(Mode-View-Controller) 패턴은 소프트웨어를 모델(Model), 뷰(View), 컨트롤러(Controller) 세 가지 역할로 나누어 설계하는 패턴입니다. 서비스와 Impl은 컨트롤러의 역할을 수행하며, 비즈니스 로직을 처리하고 모델과 뷰를 연결하는 역할을 합니다. 이를 통해 코드의 구조를 명확히 분리하여 관리하고, 유연하게 확장 가능한 애플리케이션을 구축할 수 있습니다.

요약하자면, 서비스와 Impl을 분리하여 사용함으로써 코드의 모듈화, 구조화, 유지보수성 향상, 트랜잭션 관리, 오류 처리, 그리고 MVC 패턴의 적용을 위한 역할을 수행합니다. 이를 통해 개발 과정과 애플리케이션의 품질을 개선할 수 있습니다.





