해커랭크 mssql 미디움문제 풀이과정


select
A.ID
, A.Name
, B.Grade
, A.Marks
FROM [Students] A
FULL OUTER JOIN [Grades] B ON A.Marks between B.Min_Mark and B.Max_Mark
where B.Grade < 8
and A.Name is NULL
or B.Grade >= 8
and A.Name is not NULL
order by  
CASE WHEN B.Grade < 8 THEN B.Grade END desc , A.Name END asc
, CASE WHEN B.Grade >= 8 THEN A.Marks END asc


select
A.ID
, A.Name
, B.Grade
, A.Marks
FROM [Students] A
FULL OUTER JOIN [Grades] B ON A.Marks between B.Min_Mark and B.Max_Mark
where B.Grade < 8
and A.Name is NULL
or B.Grade >= 8
and A.Name is not NULL
order by  B.Grade desc , A.Name asc,  A.Marks asc



select
 A.Name
, B.Grade
, A.Marks
FROM [Students] A
RIGHT OUTER JOIN [Grades] B ON A.Marks between B.Min_Mark and B.Max_Mark
where B.Grade < 8
and A.Name is NULL 
or B.Grade >= 8
and A.Name is not NULL
order by 
 CASE WHEN B.Grade >= 8 THEN A.Name END asc , B.Grade desc 
,CASE WHEN B.Grade < 8 THEN  A.Marks END asc 


select
 A.Name
, B.Grade
, A.Marks
FROM [Students] A
LEFT OUTER JOIN [Grades] B ON A.Marks between B.Min_Mark and B.Max_Mark
where B.Grade < 8
and A.Name is NULL
or B.Grade >= 8
and A.Name is not NULL
order by 
 CASE WHEN B.Grade >= 8 THEN A.Name END asc , B.Grade desc 
,CASE WHEN B.Grade < 8 THEN  A.Marks END asc 




select
 CASE  A.Name
	 WHEN B.Grade < 8 THEN A.Name is NULL 
	 ELSE A.Name is not NULL 
 END A.Name
, B.Grade
, A.Marks
FROM [Students] A
LEFT OUTER JOIN [Grades] B ON A.Marks between B.Min_Mark and B.Max_Mark
order by
 CASE WHEN B.Grade >= 8 THEN A.Name END asc , B.Grade desc 
,CASE WHEN B.Grade < 8 THEN  A.Marks END asc 



select
 CASE 
	 WHEN B.Grade < 8 THEN A.Name is NULL 
	 ELSE A.Name is not NULL 
 END
, B.Grade
, A.Marks
FROM [Students] A
LEFT OUTER JOIN [Grades] B ON A.Marks between B.Min_Mark and B.Max_Mark
order by
 CASE WHEN B.Grade >= 8 THEN A.Name END asc , B.Grade desc 
,CASE WHEN B.Grade < 8 THEN  A.Marks END asc 



--------------------------------------------------------------------
UNION:
두개의 SELECT 결과를 합칠수 있습니다.  합친 결과에서 중복되는 행은 하나만 표시합니다.
단, 컬럼의 개수가 같아야하고, 각 컬럼의 데이터타입이 같아야합니다.


select
 CASE 
	 WHEN B.Grade < 8 THEN NULL
	 ELSE A.Name 
 END as NAME
, B.Grade
, A.Marks
FROM [Students] A
LEFT OUTER JOIN [Grades] B ON A.Marks between B.Min_Mark and B.Max_Mark
where 1=1
order by B.Grade desc , A.Name  asc 

Britney 10 95
Heraldo 10 94
Julia 10 96
Kristeen 10 100
Stuart 10 99
Amina 9 89
Christene 9 88
Salma 9 81
Samantha 9 87
Scarlet 9 80
Vivek 9 84
Aamina 8 77
Belvet 8 78
Paige 8 74
Priya 8 76
Priyanka 8 77

UNION  (ALL)

 select
 'Null'
, B.Grade
, A.Marks
FROM [Students] A
LEFT OUTER JOIN [Grades] B ON A.Marks between B.Min_Mark and B.Max_Mark
where B.Grade < 8 
order by  B.Grade desc , A.Marks asc

Null 7 64
Null 7 66
Null 6 55
Null 4 34
Null 3 24


----------------------------------------------------------------------------



학생 및 성적이라는 두 개의 테이블이 제공됩니다. 학생에는 ID, 이름 및 마크의 세 열이 있습니다.

성적에는 다음 데이터가 포함됩니다.

Ketty는 Eve에게 이름, 등급 및 마크라는 세 개의 열이 포함된 보고서를 생성하는 작업을 제공합니다. ----------- 
Ketty는 8등급 미만을 받은 학생의 이름을 원하지 않습니다. -----------------------------------------------------
보고서는 등급별로 내림차순으로 작성해야 합니다. -------------------------------------------------------------- 9부터
즉, 더 높은 등급이 먼저 입력됩니다. 

같은 등급(8-10)이 배정된 학생이 한 명 이상인 경우 해당 학생의 이름을 알파벳순으로 정렬합니다. ---------- where 8-9학년은 order by name asc
마지막으로 등급이 8보다 낮으면 "NULL"을 이름으로 사용하고 등급별로 내림차순으로 나열합니다. ---------- where 8 > grades , name= 'null' 이름 사용, order by grades desc
같은 등급(1-7)이 배정된 학생이 한 명 이상인 경우 해당 학생의 점수를 오름차순으로 정렬합니다. -----------where 1-7학년 order by score asc


Eve를 돕기 위해 쿼리를 작성하십시오.

등급이 8보다 작으면 이름으로 "NULL"을 인쇄합니다.

학생들에게 할당된 성적과 함께 다음 표를 고려하십시오.

따라서 다음 학생들은 8, 9 또는 10 등급을 받았습니다.

정답 : 

select
 CASE 
     WHEN B.Grade < 8 THEN NULL
     ELSE A.Name 
 END as NAME
, B.Grade
, A.Marks
FROM [Students] A
LEFT OUTER JOIN [Grades] B ON A.Marks between B.Min_Mark and B.Max_Mark
where 1=1
order by B.Grade desc , A.Name  asc 



Julia는 코딩 대회를 막 마쳤고 순위표를 구성하는 데 당신의 도움이 필요합니다! 

두 개 이상의 챌린지에서 전체 점수를 얻은 해커의 이름 과 각각 의 해커 ID 를 출력하는 쿼리를 작성하십시오 . 

해커가 전체 점수를 획득한 총 챌린지 수를 기준으로 출력을 내림차순으로 정렬합니다. 
두 명 이상의 해커가 같은 수의 챌린지에서 전체 점수를 받은 경우 해커 _id 오름차순으로 정렬합니다 .

Hacker 86870 은 난이도 2의 챌린지 71055 에서 30 점을 얻었 으므로 86870 은 이 챌린지에서 전체 점수를 받았습니다.

Hacker 90411 은 난이도 2의 챌린지 71055 에서 30 점을 얻었 으므로 90411 은 이 챌린지에서 전체 점수를 받았습니다.

Hacker 90411 은 난이도가 6 인 챌린지 66730 에서 100 점을 얻었 으므로 90411 은 이 챌린지에서 만점을 받았습니다.

해커 90411 만이 두 개 이상의 챌린지에서 전체 점수를 얻었으므로 해커 ID 와 이름을 다음 과 같이 인쇄합니다. 공백으로 구분된 값.

해커 Hackers 난이도 Difficulty  도전 Challenges 제출 Submissions

select 
 D.submission_id
, A.hacker_id
, A.name
, B.challenge_id
, C.score
FROM Hackers A
FULL OUTER JOIN Challenges B ON A.hacker_id = B.hacker_id
FULL OUTER JOIN Difficulty C ON C.difficulty_level = B.difficulty_level
FULL OUTER JOIN Submissions D ON D.score = C.score

order by  A.hacker_id asc


SELECT DISTINCT(B.hacker_id) 
, A.name
,COUNT (*) AS COUNT
FROM Challenges B
FULL OUTER JOIN Hackers A ON A.hacker_id = B.hacker_id
FULL OUTER JOIN Difficulty C ON C.difficulty_level = B.difficulty_level
FULL OUTER JOIN Submissions D ON D.hacker_id = B.hacker_id 
WHERE D.score = C.score --제출자 점수가 c 점수랑 같아야함
GROUP BY B.hacker_id
HAVING COUNT(*)>1
ORDER BY B.hacker_id ASC

한 해커가 참여한 챌린지 갯수(count )에서 그레벨에 맞는 전체점수를 얻은 참가자를 조회.


SELECT DISTINCT(B.hacker_id) 
, A.name
, COUNT(*) 
FROM Challenges B
FULL OUTER JOIN Hackers A ON A.hacker_id = B.hacker_id
FULL OUTER JOIN Difficulty C ON C.difficulty_level = B.difficulty_level
FULL OUTER JOIN Submissions D ON D.hacker_id = B.hacker_id 
WHERE D.score = C.score 
GROUP BY B.hacker_id
HAVING COUNT(*)>1
ORDER BY B.hacker_id ASC



SELECT B.hacker_id
, (select A.name From Hackers A where A.hacker_id = B.hacker_id)
,  COUNT(*)
FROM Challenges B 
FULL OUTER JOIN Hackers A ON A.hacker_id = B.hacker_id
FULL OUTER JOIN Difficulty C ON C.difficulty_level = B.difficulty_level
FULL OUTER JOIN Submissions D ON D.hacker_id = B.hacker_id 
WHERE D.score = C.score 
GROUP BY B.hacker_id 
HAVING COUNT(*)>1
ORDER BY COUNT(*) desc , B.hacker_id ASC


SELECT B.hacker_id
, (select A.name From Hackers A where A.hacker_id = B.hacker_id)
,  COUNT(*)
FROM Challenges A
FULL OUTER JOIN Hackers B ON B.hacker_id = A.hacker_id
FULL OUTER JOIN Difficulty C ON C.difficulty_level = B.difficulty_level
FULL OUTER JOIN Submissions D ON D.hacker_id = B.hacker_id 
WHERE D.score = C.score 
GROUP BY B.hacker_id 
HAVING COUNT(*)>1
ORDER BY COUNT(*) desc , B.hacker_id ASC

SELECT A.hacker_id
FROM Submissions A
ORDER BY A.score



SELECT A.hacker_id
, (select A.name From Hackers A where A.hacker_id = B.hacker_id)
, COUNT(*)
FROM Submissions A
RIGHT OUTER JOIN Hackers B ON A.hacker_id = B.hacker_id
LEFT OUTER JOIN Challenges C ON A.challenge_id = C.challenge_id
LEFT OUTER JOIN Difficulty D ON C.difficulty_level = D.difficulty_level 
WHERE A.score = D.score 
GROUP BY A.hacker_id 
HAVING COUNT(*)>1
ORDER BY COUNT(*) desc , A.hacker_id ASC



SELECT A.hacker_id
, B.name
FROM Submissions A
RIGHT OUTER JOIN Hackers B ON B.hacker_id = A.hacker_id
---------------------------------------t성공답안------------------------------------------------

SELECT A.hacker_id
, (select B.name From Hackers B where A.hacker_id = B.hacker_id)
FROM Submissions A
RIGHT OUTER JOIN Hackers B ON A.hacker_id = B.hacker_id
LEFT OUTER JOIN Challenges C ON A.challenge_id = C.challenge_id
LEFT OUTER JOIN Difficulty D ON C.difficulty_level = D.difficulty_level 
WHERE A.score = D.score 
GROUP BY A.hacker_id 
HAVING COUNT(*)>1
ORDER BY COUNT(*) desc , A.hacker_id ASC

----------------------------------------------------------------------------------

SELECT B.hacker_id
, (select A.name From Hackers A where A.hacker_id = B.hacker_id)
FROM Challenges A
LEFT OUTER JOIN Hackers B ON A.hacker_id = B.hacker_id
LEFT OUTER JOIN Difficulty C ON A.difficulty_level = C.difficulty_level
RIGHT OUTER JOIN Submissions D ON A.hacker_id = D.hacker_id 
WHERE D.score = C.score 
GROUP BY B.hacker_id 
HAVING COUNT(*)>1
ORDER BY COUNT(*) desc , B.hacker_id ASC

헤르미온느는 가장 좋은 선택 방법은 
고출력과 나이의 사악하지 않은 지팡이 를 구입하는 데 필요한 최소 골드 갤리온 수를 결정하는 것이라고 결정합니다 . 
인쇄하는 쿼리를 작성 아이디 , 연령 , coins_needed 및 전원 론의 관심에서가, 내림차순의 순서로 정렬하는 지팡이의 힘을 . 
하나 이상의 지팡이가 같은 힘을 가진 경우 결과를 나이 내림차순으로 정렬합니다 .


 최소 골드 갤리온 수
 사악하지 않은
 아이디 , 연령 , coins_neede, 힘
 힘은 desc
 같은 힘은 나이로 desc

 1038 496 4789 10
1303 496 6678 10
1130 494 9439 10
1315 492 4126 10
892 492 4345 10
9 491 7345 10
858 483 4352 10
1221 483 7985 10

 WAND, WANDS_PROPERTY

select 
A.id 
, B.age 
, A.coins_needed 
, A.power
from Wands A
FULL OUTER JOIN Wands_Property B ON A.code = B.code
where B.is_evil = 0
order by A.power desc , B.age desc



Julia는 학생들에게 코딩 문제를 몇 가지 만들도록 요청했습니다. 
해커 ID , 이름 및 각 학생이 생성한 총 챌린지 수 를 출력하는 쿼리를 작성하십시오 . 
총 챌린지 수를 기준으로 결과를 내림차순으로 정렬합니다. 두 명 이상의 학생이 같은 수의 도전 과제를 만든 경우 해커 ID를 기준으로 결과를 정렬합니다 . 
두 명 이상의 학생이 동일한 수의 도전 과제를 생성했고 
개수가 생성된 최대 도전 과제 수보다 적은 경우 해당 학생을 결과에서 제외합니다. 

-- 맨위 정렬했을때 구한 최대 도전과제 수(maxmun)이 2명이상으로 중복이면 중복제거하지않고 목록을 보여주고
-- 최대 도전과제수보다 적은 수일 경우(아닐경우) 2명이상이면 해당 중복되는 학생을 모두 삭제한다.


//해커 ID , 이름 및 각 학생이 생성한 총 챌린지 수를 출력하는 쿼리
SELECT 
    A.hacker_id
    , A.name
    , count(*) 
FROM Hackers  A
INNER JOIN Challenges B ON A.hacker_id = B.hacker_id
where 1=1
GROUP BY A.hacker_id, A.name
order by  count(*) desc, A.hacker_id desc// 하나의 이런 테이블이 있다고 가정한다.

select *from table 1


maxmum =

//개수가 생성된 최대 도전 과제 수
SELECT top 1
count(*) 
FROM Hackers  A
INNER JOIN Challenges B ON A.hacker_id = B.hacker_id
where 1=1
GROUP BY A.hacker_id, A.name
order by count(*) desc, A.hacker_id desc  //maxmum 을 구하는식 이게 아니라면 중복되는 카운트를 모두 제외한다.


select  
hacker_id
, name
, case challenges_created != maxmun 아니고 And 두개 이상이라면(HAVING COUNT(*)>1)
then challenges_created not in('challenges_created')
from table1
where 1=1
order by challenges_created desc, hacker_id desc



select  
C.hacker_id
, C.name
, case C.challenges_created not when (SELECT top 1 count(*) FROM Hackers  A
INNER JOIN Challenges B ON A.hacker_id = B.hacker_id
where 1=1
GROUP BY A.hacker_id, A.name
order by count(*) desc, A.hacker_id desc ) And HAVING COUNT(*)>1
then not in('C.challenges_created')
from (SELECT 
    A.hacker_id
    , A.name
    , count(*) 
FROM Hackers  A
INNER JOIN Challenges B ON A.hacker_id = B.hacker_id
where 1=1
GROUP BY A.hacker_id, A.name
order by  count(*) desc, A.hacker_id desc) C
where 1=1
order by C.challenges_created desc, C.hacker_id desc






select c.hacker_id, h.name, count(c.challenge_id) as total from challenges c

inner join hackers h
on h.hacker_id= c.hacker_id

group by c.hacker_id having 

total=
(select  count(c1.challenge_id) from challenges c1
group by c1.hacker_id 
ORDER BY count(c1.challenge_id) desc limit 1)

or 

count(c.challenge_id) in 
(select t1.tot from ((select t.tot, count(t.hacker_id) from (select count(c2.challenge_id) as tot, c2.hacker_id from challenges c2
group by c2.hacker_id) as t
group by t.tot having count(t.hacker_id)=1) as t1))

order by total desc, h.hacker_id;









SELECT 
    A.hacker_id
    , A.name
    , max(count(*)) as challenges_created
FROM Hackers  A
INNER JOIN Challenges B ON A.hacker_id = B.hacker_id
where 1=1
GROUP BY A.hacker_id, A.name
order by challenges_created desc, A.hacker_id desc


SELECT top 1
count(*) as challenges_created
FROM Hackers  A
INNER JOIN Challenges B ON A.hacker_id = B.hacker_id
where 1=1
GROUP BY A.hacker_id, A.name
order by challenges_created desc, A.hacker_id desc  


SELECT 
    A.hacker_id
    , A.name
    , (SELECT top 1
count(*) as challenges_created
FROM Hackers  A
INNER JOIN Challenges B ON A.hacker_id = B.hacker_id
where 1=1
GROUP BY A.hacker_id, A.name
order by challenges_created desc, A.hacker_id desc)
FROM Hackers  A
INNER JOIN Challenges B ON A.hacker_id = B.hacker_id
where 1=1
GROUP BY A.hacker_id, A.name
order by challenges_created desc, A.hacker_id desc



//개수가 생성된 최대 도전 과제 수보다 적은 경우 해당 학생을 결과에서 제외한 목록

SELECT 
    A.hacker_id
    , A.name
    , count(*) as challenges_created
FROM Hackers  A
INNER JOIN Challenges B ON A.hacker_id = B.hacker_id
where 1=1
AND challenges_created = (SELECT top 1
count(*) as challenges_created
FROM Hackers  A
INNER JOIN Challenges B ON A.hacker_id = B.hacker_id
where 1=1
GROUP BY A.hacker_id, A.name
order by challenges_created desc, A.hacker_id desc)
GROUP BY A.hacker_id, A.name
order by count(*) desc, A.hacker_id desc



SELECT 
    A.hacker_id
    , A.name
    , count(SELECT top 1
count(*) as challenges_created
FROM Hackers  A
INNER JOIN Challenges B ON A.hacker_id = B.hacker_id
where 1=1
GROUP BY A.hacker_id, A.name
order by challenges_created desc, A.hacker_id desc) as challenges_created
FROM Hackers  A
INNER JOIN Challenges B ON A.hacker_id = B.hacker_id
where 1 = 1
GROUP BY A.hacker_id, A.name
order by count(*) desc, A.hacker_id desc


SELECT 
    A.hacker_id
    , A.name
    , count(*) as challenges_created
FROM Hackers  A
INNER JOIN Challenges B ON A.hacker_id = B.hacker_id
where count(*) >=

(SELECT top 1
count(*) as challenges_created
FROM Hackers  A
INNER JOIN Challenges B ON A.hacker_id = B.hacker_id
where 1=1
GROUP BY A.hacker_id, A.name
order by challenges_created desc, A.hacker_id desc)

GROUP BY A.hacker_id, A.name
order by count(*) desc, A.hacker_id desc


SELECT TOP 1 COUNT('A') AS TOTAL FROM Challenges GROUP BY hacker_id ORDER BY TOTAL DESC

  SELECT
            COUNT('A') AS CNT
        FROM Challenges tmp
        WHERE 1=1
            AND tmp.H_ID = a.H_ID
			
        SELECT 
            COUNT('A') AS DUP_CNT
        FROM
        (
            SELECT
                tmp.hacker_id AS DUP_ID
            FROM Challenges tmp
            WHERE 1=1
                AND tmp.hacker_id != a.hacker_id
            GROUP BY tmp.hacker_id
            HAVING COUNT('A') = prj.CNT
        ) tmpznhjfl





SELECT DISTINCT *
FROM (
SELECT 
    A.hacker_id
    , A.name
    , count(B.challenge_id) as cc
FROM Hackers  A
INNER JOIN Challenges B ON A.hacker_id = B.hacker_id
where 1=1
GROUP BY A.hacker_id, A.name
) 




* WITH 구문 단일 변수 사용 예제
WITH temp AS (
    SELECT 1 AS num, '단일' AS gubun, 'with 구문' AS contents, '0001' AS userid
     UNION ALL
    SELECT 2 AS num, '단일' AS gubun, '변수' AS contents, '0002' AS userid
)

SELECT num, gubun, contents, userid
  FROM temp

  Union과 UnionAll은 두 쿼리문을 하나로 합쳐준다는것에 공통점이 있습니다.

하지만 Union은 두 쿼리의 결과의 중복값을 제거해서 보여주고,

UnionAll은 중복된값도 전부 다 보여준다는 차이점이 있습니다.

속도는 당연히 중복값제거를 위해 연산을 한번 더 해야하기때문에 

UnionAll이 Union보다 더 빠르겠죠?

Union 사용시 주의점

☞ 칼럼명이 같아야한다. (같지않을경우 AS를 사용하여 같게 만들어주면 됩니다.)

☞ 칼럼별 데이터타입이 같아야합니다.
